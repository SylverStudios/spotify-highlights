service: serverless-spotify-api

frameworkVersion: ">=v1.34 <2.0.0"

plugins:
  - serverless-python-requirements

provider:
  name: aws
  runtime: python2.7
  profile: personal
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: spotify_artists/app.lambda_handler
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}
      REFRESH_TOKEN: ${env:REFRESH_TOKEN}
      CLIENT_TOKEN: ${env:CLIENT_TOKEN}
    events:
      - http:
          path: artists
          method: get
          cors: true

resources:
  Resources:
    SpotifyDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}